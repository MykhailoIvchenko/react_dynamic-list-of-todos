{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","userSelected","filterTodosList","filterTodosByStatus","randomizeTodosList","displayedTodos","currentTodoId","className","onChange","event","target","value","defaultValue","type","onClick","map","todo","id","checked","readOnly","title","userId","request","url","fetch","then","response","ok","Error","status","statusText","text","json","getUserById","CurrentUser","clear","useState","userName","setUserName","userEmail","setUserEmail","userPhone","setUserPhone","hasLoadingError","setHasLoadingError","loadUser","usId","a","user","useEffect","name","email","phone","App","selectedUserId","setSelectedUserId","selectedTodoId","setSelectedTodoId","completed","todos","setTodos","todosRandomized","setTodosRandomized","visibleTodos","setVisibleTodos","searchQuery","setSearchQuery","setStatus","todosArr","query","receivedStatus","filter","filterByStatus","toLowerCase","includes","result","todoStatus","randomizedTodos","helperArray","length","currentTodoIndex","Math","round","random","currentTodo","splice","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3509c7ee.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  userSelected: (userId: number, id: number) => void;\n  filterTodosList: (searchQuery: string) => void,\n  filterTodosByStatus: (status: string) => void,\n  randomizeTodosList: () => void,\n  displayedTodos: Todo[];\n  currentTodoId: number,\n};\n\nexport const TodoList: React.FC<Props>\n  = ({\n    userSelected,\n    filterTodosList,\n    filterTodosByStatus,\n    randomizeTodosList,\n    displayedTodos,\n    currentTodoId,\n  }) => (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <label\n        className=\"Search\"\n      >\n        Search todo\n        <input\n          className=\"Search__field\"\n          onChange={\n            (event) => filterTodosList(event.target.value)\n          }\n        />\n      </label>\n\n      <select\n        className=\"StatusSelection\"\n        defaultValue=\"all\"\n        onChange={(event) => filterTodosByStatus(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          Show all todos\n        </option>\n        <option\n          value=\"active\"\n        >\n          Show active todos\n        </option>\n        <option\n          value=\"completed\"\n        >\n          Show completed todos\n        </option>\n      </select>\n\n      <button\n        className=\"Randomize\"\n        type=\"button\"\n        onClick={randomizeTodosList}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {displayedTodos.map(todo => (\n            <li\n              className={\n                todo.id === currentTodoId\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n              }\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.id === currentTodoId}\n                  readOnly\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  userSelected(todo.userId, todo.id);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      if (!response.text) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n\nexport const getUserById = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\ntype UserProps = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<UserProps> = ({\n  userId, clear,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPhone, setUserPhone] = useState('');\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const loadUser = async (usId: number) => {\n    try {\n      const user = await getUserById(usId);\n\n      setHasLoadingError(false);\n\n      return user;\n    } catch (error) {\n      setHasLoadingError(true);\n\n      return error;\n    }\n  };\n\n  useEffect(() => {\n    loadUser(userId).then(user => {\n      if (user) {\n        setUserName(user.name);\n        setUserEmail(user.email);\n        setUserPhone(user.phone);\n      }\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2\n        className=\"CurrentUser__title\"\n      >\n        <span>\n          Selected user:\n          {` ${userId}`}\n        </span>\n      </h2>\n\n      {\n        !hasLoadingError\n          ? (\n            <>\n              <h3 className=\"CurrentUser__name\">{userName}</h3>\n              <p className=\"CurrentUser__email\">{userEmail}</p>\n              <p className=\"CurrentUser__phone\">{userPhone}</p>\n            </>\n          )\n          : <p>User information is absent</p>\n      }\n\n      <button\n        className=\"ClearUserInfo\"\n        type=\"button\"\n        onClick={clear}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [\n    selectedTodoId,\n    setSelectedTodoId,\n  ] = useState(0);\n\n  const [\n    todos,\n    setTodos] = useState([{\n    userId: 0,\n    id: 0,\n    title: '',\n    completed: false,\n  }]);\n\n  const [\n    todosRandomized,\n    setTodosRandomized,\n  ] = useState([...todos]);\n\n  const [\n    visibleTodos,\n    setVisibleTodos,\n  ] = useState([...todosRandomized]);\n\n  const [\n    searchQuery,\n    setSearchQuery,\n  ] = useState('');\n\n  const [\n    status,\n    setStatus,\n  ] = useState('all');\n\n  const userSelection = (userId: number, id: number) => {\n    setSelectedUserId(userId);\n    setSelectedTodoId(id);\n  };\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n    setSelectedTodoId(0);\n  };\n\n  const updateSearchQuery = (query: string) => {\n    if (query) {\n      setSearchQuery(query);\n    } else {\n      setSearchQuery('');\n    }\n  };\n\n  const updateStatus = (todoStatus: string) => {\n    setStatus(todoStatus);\n  };\n\n  const randomizeTodos = () => {\n    const randomizedTodos = [];\n    const helperArray = [...todos];\n\n    while (helperArray.length > 0) {\n      const currentTodoIndex\n        = Math.round(Math.random() * (helperArray.length - 1));\n      const currentTodo = helperArray.splice(currentTodoIndex, 1);\n\n      randomizedTodos.push(currentTodo[0]);\n    }\n\n    setTodosRandomized(randomizedTodos);\n  };\n\n  const filterByStatus = (receivedStatus: string) => {\n    switch (receivedStatus) {\n      case 'active':\n        return todosRandomized.filter(todo => todo.completed === false);\n      case 'completed':\n        return todosRandomized.filter(todo => todo.completed === true);\n      default:\n        return todosRandomized;\n    }\n  };\n\n  const filterByQuery = (todosArr: Todo[], query: string) => {\n    if (!query) {\n      return [...todosArr];\n    }\n\n    return todosArr.filter(todo => todo.title.toLowerCase()\n      .includes(query.toLowerCase()));\n  };\n\n  useEffect(() => {\n    setVisibleTodos(filterByQuery(filterByStatus(status), searchQuery));\n  }, [status, searchQuery, todosRandomized]);\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setTodos(result);\n      setVisibleTodos([...result]);\n      setTodosRandomized([...result]);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          userSelected={userSelection}\n          filterTodosList={updateSearchQuery}\n          filterTodosByStatus={updateStatus}\n          randomizeTodosList={randomizeTodos}\n          displayedTodos={visibleTodos}\n          currentTodoId={selectedTodoId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clear={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}