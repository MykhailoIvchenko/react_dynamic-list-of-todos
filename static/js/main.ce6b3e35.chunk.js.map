{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","selectUser","displayedTodos","currentTodoId","className","map","todo","classNames","TodoList__item","completed","type","checked","readOnly","id","title","onClick","userId","request","url","fetch","then","response","ok","Error","status","statusText","text","json","getUserById","CurrentUser","clear","useState","userName","userEmail","userPhone","curUser","setCurUser","hasLoadingError","setHasLoadingError","loadUser","usId","a","user","useEffect","name","email","phone","App","selectedUserId","setSelectedUserId","selectedTodoId","setSelectedTodoId","todos","setTodos","searchQuery","setSearchQuery","setStatus","result","onChange","event","target","value","defaultValue","randomizedTodos","helperArray","length","currentTodoIndex","Math","round","random","currentTodo","splice","push","todosArr","query","lowerQuery","toLowerCase","filter","includes","filterByQuery","receivedStatus","filterByStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce6b3e35.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  selectUser: (userId: number, id: number) => void;\n  displayedTodos: Todo[];\n  currentTodoId: number,\n};\n\nexport const TodoList: React.FC<Props>\n  = ({\n    selectUser,\n    displayedTodos,\n    currentTodoId,\n  }) => (\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {displayedTodos.map(todo => (\n          <li\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--checked': todo.completed,\n              'TodoList__item--unchecked': !todo.completed,\n            })}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p\n                className={\n                  (todo.id === currentTodoId) ? 'Selected' : ''\n                }\n              >\n                {todo.title}\n              </p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => {\n                selectUser(todo.userId, todo.id);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      if (!response.text) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n\nexport const getUserById = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\ntype UserProps = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<UserProps> = ({\n  userId, clear,\n}) => {\n  const [curUser, setCurUser] = useState({\n    userName: '',\n    userEmail: '',\n    userPhone: '',\n  });\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const loadUser = async (usId: number) => {\n    try {\n      const user = await getUserById(usId);\n\n      setHasLoadingError(false);\n\n      return user;\n    } catch (error) {\n      setHasLoadingError(true);\n\n      return error;\n    }\n  };\n\n  useEffect(() => {\n    loadUser(userId).then(user => {\n      if (user) {\n        setCurUser({\n          userName: user.name,\n          userEmail: user.email,\n          userPhone: user.phone,\n        });\n      }\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2\n        className=\"CurrentUser__title\"\n      >\n        <span>\n          Selected user:\n          {` ${userId}`}\n        </span>\n      </h2>\n\n      {\n        !hasLoadingError\n          ? (\n            <>\n              <h3 className=\"CurrentUser__name\">{curUser.userName}</h3>\n              <p className=\"CurrentUser__email\">{curUser.userEmail}</p>\n              <p className=\"CurrentUser__phone\">{curUser.userPhone}</p>\n            </>\n          )\n          : <p>User information is absent</p>\n      }\n\n      <button\n        className=\"ClearUserInfo\"\n        type=\"button\"\n        onClick={clear}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [status, setStatus] = useState('all');\n\n  const selectUser = (userId: number, id: number) => {\n    setSelectedUserId(userId);\n    setSelectedTodoId(id);\n  };\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n    setSelectedTodoId(0);\n  };\n\n  const randomizeTodos = () => {\n    const randomizedTodos = [];\n    const helperArray = [...todos];\n\n    while (helperArray.length > 0) {\n      const currentTodoIndex\n        = Math.round(Math.random() * (helperArray.length - 1));\n      const currentTodo = helperArray.splice(currentTodoIndex, 1);\n\n      randomizedTodos.push(currentTodo[0]);\n    }\n\n    setTodos(randomizedTodos);\n  };\n\n  const filterByStatus = (receivedStatus: string) => {\n    switch (receivedStatus) {\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  };\n\n  const filterByQuery = (todosArr: Todo[], query: string) => {\n    if (!query) {\n      return [...todosArr];\n    }\n\n    const lowerQuery = query.toLowerCase();\n\n    return todosArr.filter(todo => todo.title.toLowerCase()\n      .includes(lowerQuery));\n  };\n\n  const getVisibleTodos = () => {\n    return filterByQuery(filterByStatus(status), searchQuery);\n  };\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setTodos(result);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label\n          className=\"Search\"\n        >\n          Search todo\n          <input\n            className=\"Search__field\"\n            onChange={\n              (event) => setSearchQuery(event.target.value)\n            }\n          />\n        </label>\n\n        <select\n          className=\"StatusSelection\"\n          defaultValue=\"all\"\n          onChange={(event) => setStatus(event.target.value)}\n        >\n          <option\n            value=\"all\"\n          >\n            Show all todos\n          </option>\n          <option\n            value=\"active\"\n          >\n            Show active todos\n          </option>\n          <option\n            value=\"completed\"\n          >\n            Show completed todos\n          </option>\n        </select>\n\n        <button\n          className=\"Randomize\"\n          type=\"button\"\n          onClick={randomizeTodos}\n        >\n          Randomize\n        </button>\n\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={selectUser}\n            displayedTodos={getVisibleTodos()}\n            currentTodoId={selectedTodoId}\n          />\n        </div>\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clear={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}